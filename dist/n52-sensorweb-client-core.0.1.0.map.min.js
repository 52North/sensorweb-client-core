/*! n52-sensorweb-client-core.0.1.0 2015-09-13 17:41 */
angular.module("listSelectionModule",["interfaceModule","statusModule"]).controller("ListSelectionButtonCtrl",["$scope","$modal",function(a,b){a.openListSelection=function(){b.open({animation:!0,templateUrl:"templates/listSelection/modal-list-selection.html",controller:"ModalListSelectionCtrl"})}}]).controller("ModalListSelectionCtrl",["$scope","$modalInstance",function(a,b){a.modalInstance=b,a.categoryParams=[{type:"category",header:"listSelection.headers.category"},{type:"feature",header:"listSelection.headers.station"},{type:"phenomenon",header:"listSelection.headers.phenomenon"},{type:"procedure",header:"listSelection.headers.procedure"}],a.stationParams=[{type:"feature",header:"listSelection.headers.station"},{type:"category",header:"listSelection.headers.category"},{type:"phenomenon",header:"listSelection.headers.phenomenon"},{type:"procedure",header:"listSelection.headers.procedure"}],a.phenomenonParams=[{type:"phenomenon",header:"listSelection.headers.phenomenon"},{type:"category",header:"listSelection.headers.category"},{type:"feature",header:"listSelection.headers.station"},{type:"procedure",header:"listSelection.headers.procedure"}],a.close=function(){b.close()}}]).directive("swcListSelection",["interfaceService","statusService","timeseriesService","$location",function(a,b,c,d){return{restrict:"E",templateUrl:"templates/listSelection/accordion-list-selection.html",scope:{parameters:"="},controller:["$scope",function(e){angular.forEach(e.parameters,function(a,b){e.$watch("parameters["+b+"].isOpen",function(a,c){a&&(e.selectedParameterIndex=b,angular.forEach(e.parameters,function(a,c){c>b&&(a.isDisabled=!0,delete a.selectedId,delete a.items),c>=b&&delete a.headerAddition}))})}),e.createParams=function(){var a={service:b.status.apiProvider.serviceID};return angular.forEach(e.parameters,function(b){b.selectedId&&(a[b.type]=b.selectedId)}),a},e.getItems=function(c){"category"===c.type?a.getCategories(null,b.status.apiProvider.url,e.createParams()).success(function(a){c.items=a}):"feature"===c.type?a.getFeatures(null,b.status.apiProvider.url,e.createParams()).success(function(a){c.items=a}):"phenomenon"===c.type?a.getPhenomena(null,b.status.apiProvider.url,e.createParams()).success(function(a){c.items=a}):"procedure"===c.type&&a.getProcedures(null,b.status.apiProvider.url,e.createParams()).success(function(a){c.items=a})},e.openNext=function(a){e.parameters[a].isDisabled=!1,e.selectedParameterIndex=a,e.parameters[a].isOpen=!0,e.getItems(e.parameters[a])},e.openItem=function(a){e.parameters[e.selectedParameterIndex].selectedId=a.id,e.parameters[e.selectedParameterIndex].headerAddition=a.label,e.selectedParameterIndex<e.parameters.length-1?e.openNext(e.selectedParameterIndex+1):(c.addTimeseriesById(null,b.status.apiProvider.url,e.createParams()),d.url("/diagram"),e.$parent.modalInstance.close())},e.openNext(0)}]}}]),angular.module("locateModule",["stationModule"]).controller("LocateButtonCtrl",["$scope","mapService",function(a,b){a.locateUser=function(){b.locateUser()}}]),angular.module("mapModule",["leaflet-directive","interfaceModule","statusModule","phenomenaModule","providerModule","stationModule","listSelectionModule","locateModule"]).controller("BasicMapController",["$scope","mapService","leafletData","$log","$translate","stationModalOpener","$compile",function(a,b,c,d,e,f,g){d.info("start mapController"),a.map=b.map,e(["map.search.label","map.search.noResult"]).then(function(a){c.getMap().then(function(b){new L.Control.GeoSearch({url:"http://nominatim.openstreetmap.org/search?format=json&q={s}",jsonpParam:"json_callback",propertyName:"display_name",searchLabel:a["map.search.label"],notFoundMessage:a["map.search.noResult"],propertyLoc:["lat","lon"],position:"topcenter",minLength:2,showMarker:!1,provider:new L.GeoSearch.Provider.OpenStreetMap,zoomLevel:13}).addTo(b)})});var h=function(b,c){var d=c.modelName;f(d,a.map.selectedPhenomenonId)};a.$on("leafletDirectiveMarker.click",h),a.$on("leafletDirectivePath.click",h),a.$watch("map.popup",function(b){angular.isDefined(b)&&b.latlng&&c.getMap().then(function(c){var d=angular.element(b.content),e=g(d),f=a.$new();angular.extend(f,b.scope);var h=e(f)[0];L.popup().setLatLng(b.latlng).setContent(h).openOn(c)})},!0)}]).factory("mapService",["$rootScope","leafletBoundsHelpers","interfaceService","statusService","settingsService","$translate","$http","$location",function(a,b,c,d,e,f,g,h){var i={},j=function(){i.markers={},i.paths={},i.popup={},i.bounds={},i.center={},i.layers={baselayers:{osm:{name:"OpenStreetMap",type:"xyz",url:"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",layerOptions:{showOnSelector:!1}}},overlays:{cluster:{name:"stations",type:"markercluster",visible:!0,layerOptions:{showOnSelector:!1}}}},a.$on("allPhenomenaSelected",function(a){i.selectedPhenomenonId=null,k()}),a.$on("phenomenonSelected",function(a,b){i.selectedPhenomenonId=b.id,k(b.id)}),a.$on("newProviderSelected",function(a){k()}),k()},k=function(a){var b;d.status.concentrationMarker&&a?(b={service:d.status.apiProvider.serviceID,phenomenon:a,expanded:!0,force_latest_values:!0,status_intervals:!0},c.getTimeseries(null,d.status.apiProvider.url,b).success(l)):(b={service:d.status.apiProvider.serviceID,phenomenon:a},c.getStations(null,d.status.apiProvider.url,b).success(l))},l=function(a){if(angular.copy({},i.markers),angular.copy({},i.paths),angular.copy({},i.bounds),a.length>0){var c=n(a[0]),e=c[1],f=c[1],g=c[0],h=c[0];$.each(a,$.proxy(function(a,b){var c=n(b);isNaN(c[0])&&isNaN(c[1])||(c[0]>h&&(h=c[0]),c[0]<g&&(g=c[0]),c[1]>e&&(e=c[1]),c[1]<f&&(f=c[1]),d.status.concentrationMarker&&m(b)?p(c,b):o(c,b))},this)),angular.copy(b.createBoundsFromArray([[parseFloat(f),parseFloat(g)],[parseFloat(e),parseFloat(h)]]),i.bounds)}},m=function(a){return angular.isDefined(a.station)},n=function(a){return a.geometry&&a.geometry.coordinates?a.geometry.coordinates:a.station.geometry.coordinates},o=function(a,b){var c={lat:a[1],lng:a[0]};d.status.clusterStations&&(c.layer="cluster"),i.markers[b.properties.id]=c},p=function(a,b){var c=q(b),d=c&&c.color?c.color:e.defaultMarkerColor;i.paths[b.station.properties.id]={type:"circleMarker",latlngs:{lat:a[1],lng:a[0]},color:"#000",fillColor:d,fill:!0,radius:10,weight:2,opacity:1,fillOpacity:.8}},q=function(a){var b=null;if(a.lastValue&&a.statusIntervals){var c=a.lastValue.value;$.each(a.statusIntervals,function(a,d){return null===d.upper&&(d.upper=Number.MAX_VALUE),null===d.lower&&(d.lower=Number.MIN_VALUE),!isNaN(d.upper)&&!isNaN(d.lower)&&parseFloat(d.lower)<c&&c<parseFloat(d.upper)?(b=d,!1):void 0})}return b},r=function(){i.center={autoDiscover:!0,zoom:12},a.$on("leafletDirectiveMap.locationfound",function(a,b){angular.copy({content:"<p>"+f.instant("map.userLocation")+"</p>",latlng:b.leafletEvent.latlng},i.popup)}),a.$on("leafletDirectiveMap.locationerror",function(a){alert(a+a.message)})},s=function(a){a&&a.station&&g.get("templates/map/locateStation.html").success(function(b){i.popup={content:b,scope:{timeseries:a,backToDiagram:function(){h.url("/diagram")}},latlng:{lat:a.station.geometry.coordinates[1],lng:a.station.geometry.coordinates[0]}},i.center={lat:a.station.geometry.coordinates[1],lng:a.station.geometry.coordinates[0],zoom:12}})};return j(),{map:i,locateUser:r,showStation:s}}]);var phenomenaModule=angular.module("phenomenaModule",["interfaceModule","statusModule"]).controller("PhenomenonListCtrl",["$scope","PhenomenonListFactory",function(a,b){a.phenomena=b.phenomena,a.showAllPhenomenons=function(){b.setSelection()},a.showSpecificPhenomenon=function(a){b.setSelection(a)},a.isSelected=function(b){return angular.equals(b,a.phenomena.selection)}}]).factory("PhenomenonListFactory",["$rootScope","interfaceService","statusService",function(a,b,c){var d={};return d.items=[],loadPhenomena=function(){var a={service:c.status.apiProvider.serviceID};b.getPhenomena(null,c.status.apiProvider.url,a).success(function(a,b,c,e){d.items=a})},setSelection=function(b){b?(d.selection=b,a.$emit("phenomenonSelected",b)):(d.selection=null,a.$emit("allPhenomenaSelected"))},a.$on("newProviderSelected",loadPhenomena),loadPhenomena(),{setSelection:setSelection,phenomena:d}}]).controller("phenomenaButtonController",["$scope","statusService",function(a,b){a.status=b.status,a.togglePhenomena=function(){b.status.showPhenomena=!b.status.showPhenomena}}]);angular.module("providerModule",["interfaceModule","statusModule"]).controller("ProviderButtonCtrl",["$scope","$modal",function(a,b){a.selectProvider=function(){b.open({animation:!0,templateUrl:"templates/map/provider-list-modal.html",controller:"ProviderListModalCtrl"})}}]).controller("ProviderListModalCtrl",["$scope","$modalInstance","providerService",function(a,b,c){a.providerList=c.providerList,a.close=function(){b.close()},a.selectProvider=function(a){c.selectProvider(a),b.close()}}]).factory("providerService",["$rootScope","settingsService","interfaceService","statusService",function(a,b,c,d){var e=[],f=function(){angular.forEach(b.restApiUrls,function(a,f){c.getServices(f).success(function(a){angular.forEach(a,function(a){var c=!1;angular.forEach(b.providerBlackList,function(b){b.serviceID===a.id&&b.apiUrl===f&&(c=!0)}),c?console.info(f+"services/"+a.id+" is blacklisted!"):(f===d.status.apiProvider.url&&d.status.apiProvider.serviceID===a.id?a.selected=!0:a.selected=!1,a.url=f,e.push(a))})})})},g=function(b){angular.forEach(e,function(c){b.id===c.id&&b.url===c.url?(c.selected=!0,d.status.apiProvider={url:c.url,serviceID:c.id},a.$emit("newProviderSelected")):c.selected=!1})};return f(),{providerList:e,selectProvider:g}}]),angular.module("stationModule",["ui.bootstrap"]).controller("ModalStationCtrl",["$scope","$modalInstance","interfaceService","statusService","stationId","phenomenonId","timeseriesService","$location",function(a,b,c,d,e,f,g,h){a.isAllSelected=!0,c.getStations(e,d.status.apiProvider.url).success(function(b,e){removeNonMatchingPhenoneons(b,f),a.station=b,angular.forEach(b.properties.timeseries,function(a,b){c.getTimeseries(b,d.status.apiProvider.url).then(function(b){angular.extend(a,b),a.selected=!0})})}),removeNonMatchingPhenoneons=function(a,b){if(b){var c=[];angular.forEach(a.properties.timeseries,function(a,d){a.phenomenon.id!==b&&c.push(d)}),angular.forEach(c,function(b){delete a.properties.timeseries[b]})}},a.toggleAll=function(){angular.forEach(a.station.properties.timeseries,function(b){b.selected=a.isAllSelected})},a.toggled=function(){var b=!0;angular.forEach(a.station.properties.timeseries,function(a){a.selected||(b=!1)}),a.isAllSelected=b},a.addTimeseriesSelection=function(){angular.forEach(a.station.properties.timeseries,function(a){a.selected&&g.addTimeseriesById(a.id,d.status.apiProvider.url)}),h.url("/diagram"),b.close()}}]).service("stationModalOpener",["$modal",function(a){return function(b,c){a.open({animation:!0,templateUrl:"templates/map/station.html",resolve:{stationId:function(){return b},phenomenonId:function(){return c}},controller:"ModalStationCtrl"})}}]);