/*! n52-sensorweb-client-core.0.1.0 */
angular.module("n52.core.listSelection",["n52.core.interface","n52.core.status"]).controller("ListSelectionButtonCtrl",["$scope","$modal",function(a,b){a.openListSelection=function(){b.open({animation:!0,templateUrl:"templates/listSelection/modal-list-selection.html",controller:"ModalListSelectionCtrl"})}}]).controller("ModalListSelectionCtrl",["$scope","$modalInstance",function(a,b){a.modalInstance=b,a.categoryParams=[{type:"category",header:"listSelection.headers.category"},{type:"feature",header:"listSelection.headers.station"},{type:"phenomenon",header:"listSelection.headers.phenomenon"},{type:"procedure",header:"listSelection.headers.procedure"}],a.stationParams=[{type:"feature",header:"listSelection.headers.station"},{type:"category",header:"listSelection.headers.category"},{type:"phenomenon",header:"listSelection.headers.phenomenon"},{type:"procedure",header:"listSelection.headers.procedure"}],a.phenomenonParams=[{type:"phenomenon",header:"listSelection.headers.phenomenon"},{type:"category",header:"listSelection.headers.category"},{type:"feature",header:"listSelection.headers.station"},{type:"procedure",header:"listSelection.headers.procedure"}],a.close=function(){b.close()}}]).directive("swcListSelection",["interfaceService","statusService","timeseriesService","$location",function(a,b,c,d){return{restrict:"E",templateUrl:"templates/listSelection/accordion-list-selection.html",scope:{parameters:"="},controller:["$scope",function(e){angular.forEach(e.parameters,function(a,b){e.$watch("parameters["+b+"].isOpen",function(a,c){a&&(e.selectedParameterIndex=b,angular.forEach(e.parameters,function(a,c){c>b&&(a.isDisabled=!0,delete a.selectedId,delete a.items),c>=b&&delete a.headerAddition}))})}),e.createParams=function(){var a={service:b.status.apiProvider.serviceID};return angular.forEach(e.parameters,function(b){b.selectedId&&(a[b.type]=b.selectedId)}),a},e.getItems=function(c){"category"===c.type?a.getCategories(null,b.status.apiProvider.url,e.createParams()).then(function(a){c.items=a}):"feature"===c.type?a.getFeatures(null,b.status.apiProvider.url,e.createParams()).then(function(a){c.items=a}):"phenomenon"===c.type?a.getPhenomena(null,b.status.apiProvider.url,e.createParams()).then(function(a){c.items=a}):"procedure"===c.type&&a.getProcedures(null,b.status.apiProvider.url,e.createParams()).then(function(a){c.items=a})},e.openNext=function(a){e.parameters[a].isDisabled=!1,e.selectedParameterIndex=a,e.parameters[a].isOpen=!0,e.getItems(e.parameters[a])},e.openItem=function(a){e.parameters[e.selectedParameterIndex].selectedId=a.id,e.parameters[e.selectedParameterIndex].headerAddition=a.label,e.selectedParameterIndex<e.parameters.length-1?e.openNext(e.selectedParameterIndex+1):(c.addTimeseriesById(null,b.status.apiProvider.url,e.createParams()),d.url("/diagram"),e.$parent.modalInstance.close())},e.openNext(0)}]}}]),angular.module("n52.core.locate",["n52.core.station"]).controller("SwcLocateButtonCtrl",["$scope","locateService",function(a,b){a.isToggled=!1,a.locateUser=function(){a.isToggled=!a.isToggled,b.locate(a.isToggled)}}]).factory("locateService",["leafletData","settingsService",function(a,b){var c,d=b.locateIconOptions?L.icon(b.locateIconOptions):new L.Icon.Default;return a.getMap().then(function(a){a.on("locationfound",function(b){removeMarker(a),c=L.marker(b.latlng,{icon:d}).addTo(a)})}),locate=function(b){a.getMap().then(function(a){b?a.locate({watch:!0,setView:!0,maxZoom:a.getZoom()}):(a.stopLocate(),removeMarker(a))})},removeMarker=function(a){angular.isDefined(c)&&a.removeLayer(c)},{locate:locate}}]),angular.module("n52.core.map",["leaflet-directive","n52.core.interface","n52.core.status","n52.core.phenomena","n52.core.provider","n52.core.station","n52.core.listSelection","n52.core.locate"]).controller("BasicMapController",["$scope","mapService","leafletData","$log","$translate","$compile","$rootScope",function(a,b,c,d,e,f,g){a.map=b.map,e(["map.search.label","map.search.noResult"]).then(function(a){c.getMap().then(function(b){new L.Control.GeoSearch({url:"http://nominatim.openstreetmap.org/search?format=json&q={s}",jsonpParam:"json_callback",propertyName:"display_name",searchLabel:a["map.search.label"],notFoundMessage:a["map.search.noResult"],propertyLoc:["lat","lon"],position:"topcenter",minLength:2,showMarker:!1,provider:new L.GeoSearch.Provider.OpenStreetMap,zoomLevel:13}).addTo(b)})}),g.$on("resizeMap",function(){c.getMap().then(function(a){a.invalidateSize(!1)})}),a.$watch("map.popup",function(b){angular.isDefined(b)&&b.latlng&&c.getMap().then(function(c){var d=angular.element(b.content),e=f(d),g=a.$new();angular.extend(g,b.scope);var h=e(g)[0];L.popup().setLatLng(b.latlng).setContent(h).openOn(c)})},!0)}]).controller("SwcZoomControlsCtrl",["$scope","mapService",function(a,b){a.zoomIn=function(){b.map.center.zoom=b.map.center.zoom+1},a.zoomOut=function(){b.map.center.zoom=b.map.center.zoom-1}}]).controller("SwcMapLayerCtrl",["$scope",function(a){a.isToggled=!1,a.openMenu=function(){a.isToggled=!0},a.closeMenu=function(){a.isToggled=!1}}]).controller("SwcBaseLayerCtrl",["$scope","mapService","leafletData",function(a,b,c){c.getMap().then(function(a){c.getLayers().then(function(c){angular.forEach(c.baselayers,function(c,d){a.hasLayer(c)&&(b.map.layers.baselayers[d].visible=!0)})})}),a.baseLayers=b.map.layers.baselayers,a.switchVisibility=function(a){angular.forEach(b.map.layers.baselayers,function(b,c){c===a?b.visible=!0:b.visible=!1}),c.getMap().then(function(b){c.getLayers().then(function(c){angular.forEach(c.baselayers,function(a){b.removeLayer(a)}),angular.isDefined(c.baselayers[a])&&b.addLayer(c.baselayers[a])})})}}]).controller("SwcOverlayCtrl",["$scope","mapService",function(a,b){a.baseLayers=b.map.layers.overlays,a.switchVisibility=function(a){a.visible=!a.visible}}]).factory("mapService",["$rootScope","leafletBoundsHelpers","interfaceService","statusService","settingsService","$translate","$http","$location",function(a,b,c,d,e,f,g,h){var i,j,k=e.stationIconOptions?e.stationIconOptions:{},l=e.baselayer?e.baselayer:{osm:{name:"Open Street Map",type:"xyz",url:"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",layerOptions:{showOnSelector:!0}}},m=angular.extend(e.overlays,{cluster:{name:"Stations",type:"markercluster",visible:!0,layerOptions:{showOnSelector:!1}}}),n={},o=function(){n.markers={},n.paths={},n.popup={},n.bounds={},n.center={},n.layers={baselayers:l,overlays:m},a.$on("allPhenomenaSelected",function(a){n.selectedPhenomenonId=null,p()}),a.$on("phenomenonSelected",function(a,b){n.selectedPhenomenonId=b.id,p(b.id)}),a.$on("redrawStations",function(a,b){p(n.selectedPhenomenonId)}),a.$on("newProviderSelected",function(a){p()}),p()},p=function(a){var b;if(e.aggregateServicesInMap&&angular.isUndefined(d.status.apiProvider.url))requestAggregatedStations(a);else{var f=d.status.apiProvider;d.status.concentrationMarker&&a?(b={service:f.serviceID,phenomenon:a,expanded:!0,force_latest_values:!0,status_intervals:!0},c.getTimeseries(null,f.url,b).then(function(a){r(a,f.url,f.serviceID)})):(b={service:f.serviceID,phenomenon:a},c.getStations(null,f.url,b).then(function(a){r(a,f.url,f.serviceID)}))}};requestAggregatedStations=function(a){i=0,j=null,angular.copy({},n.markers),angular.copy({},n.paths),angular.copy({},n.bounds),angular.forEach(e.restApiUrls,function(b,d){c.getServices(d).then(function(e){angular.forEach(e,function(e){i++,c.getStations(null,d,{service:e.id,phenomenon:a}).then(function(a){q(a,d,e.id+b)})})})})};var q=function(a,c,e){if(i--,a.length>0){var f=t(a[0]);angular.isObject(j)||(j={topmost:f[1],bottommost:f[1],leftmost:f[0],rightmost:f[0]}),$.each(a,$.proxy(function(a,b){var f=t(b);isNaN(f[0])&&isNaN(f[1])||(f[0]>j.rightmost&&(j.rightmost=f[0]),f[0]<j.leftmost&&(j.leftmost=f[0]),f[1]>j.topmost&&(j.topmost=f[1]),f[1]<j.bottommost&&(j.bottommost=f[1]),d.status.concentrationMarker&&s(b)?v(f,b):u(f,b,c,e))},this)),angular.copy(b.createBoundsFromArray([[parseFloat(j.bottommost),parseFloat(j.leftmost)],[parseFloat(j.topmost),parseFloat(j.rightmost)]]),n.bounds)}},r=function(a,c,e){if(angular.copy({},n.markers),angular.copy({},n.paths),angular.copy({},n.bounds),a.length>0){var f=t(a[0]),g=f[1],h=f[1],i=f[0],j=f[0];$.each(a,$.proxy(function(a,b){var f=t(b);isNaN(f[0])&&isNaN(f[1])||(f[0]>j&&(j=f[0]),f[0]<i&&(i=f[0]),f[1]>g&&(g=f[1]),f[1]<h&&(h=f[1]),d.status.concentrationMarker&&s(b)?v(f,b,c,e):u(f,b,c,e))},this)),angular.copy(b.createBoundsFromArray([[parseFloat(h),parseFloat(i)],[parseFloat(g),parseFloat(j)]]),n.bounds)}},s=function(a){return angular.isDefined(a.station)},t=function(a){return a.geometry&&a.geometry.coordinates?a.geometry.coordinates:a.station.geometry.coordinates},u=function(a,b,c,e){var f={lat:a[1],lng:a[0],icon:k,stationsId:b.properties.id,url:c};d.status.clusterStations&&(f.layer="cluster"),n.markers[w(b.properties.id+e)]=f},v=function(a,b,c,d){var f=x(b),g=f&&f.color?f.color:e.defaultMarkerColor;n.paths[w(b.station.properties.id+d)]={type:"circleMarker",latlngs:{lat:a[1],lng:a[0]},color:"#000",fillColor:g,fill:!0,radius:10,weight:2,opacity:1,fillOpacity:.8,stationsId:b.station.properties.id,url:c}},w=function(a){return a.replace("-","")},x=function(a){var b=null;if(a.lastValue&&a.statusIntervals){var c=a.lastValue.value;$.each(a.statusIntervals,function(a,d){return null===d.upper&&(d.upper=Number.MAX_VALUE),null===d.lower&&(d.lower=Number.MIN_VALUE),!isNaN(d.upper)&&!isNaN(d.lower)&&parseFloat(d.lower)<c&&c<parseFloat(d.upper)?(b=d,!1):void 0})}return b},y=function(){n.center={autoDiscover:!0,zoom:12},a.$on("leafletDirectiveMap.locationfound",function(a,b){angular.copy({content:"<p>"+f.instant("map.userLocation")+"</p>",latlng:b.leafletEvent.latlng},n.popup)}),a.$on("leafletDirectiveMap.locationerror",function(a){alert(a+a.message)})},z=function(a){a&&a.station&&g.get("templates/map/locateStation.html").success(function(b){n.popup={content:b,scope:{timeseries:a,backToDiagram:function(){h.url("/diagram")}},latlng:{lat:a.station.geometry.coordinates[1],lng:a.station.geometry.coordinates[0]}},n.center={lat:a.station.geometry.coordinates[1],lng:a.station.geometry.coordinates[0],zoom:12}})};return o(),{map:n,locateUser:y,showStation:z}}]),angular.module("n52.core.phenomena",["n52.core.interface","n52.core.status"]).controller("PhenomenonListCtrl",["$scope","PhenomenonListFactory",function(a,b){a.phenomena=b.phenomena,a.showAllPhenomenons=function(){b.setSelection()},a.showSpecificPhenomenon=function(a){b.setSelection(a)},a.isSelected=function(b){return angular.equals(b,a.phenomena.selection)}}]).factory("PhenomenonListFactory",["$rootScope","interfaceService","statusService","settingsService",function(a,b,c,d){var e={};return e.items=[],loadPhenomena=function(){if(d.aggregateServicesInMap&&angular.isUndefined(c.status.apiProvider.url))loadAggregatedPhenomenons();else{var a={service:c.status.apiProvider.serviceID};b.getPhenomena(null,c.status.apiProvider.url,a).then(function(a){e.items=a})}},loadAggregatedPhenomenons=function(){angular.forEach(d.restApiUrls,function(a,c){b.getServices(c).then(function(a){angular.forEach(a,function(a){var d={service:a.id};b.getPhenomena(null,c,d).then(function(a){angular.forEach(a,function(a){e.items.push(a)})})})})})},setSelection=function(b){b?(e.selection=b,a.$emit("phenomenonSelected",b)):(e.selection=null,a.$emit("allPhenomenaSelected"))},a.$on("newProviderSelected",loadPhenomena),loadPhenomena(),{setSelection:setSelection,phenomena:e}}]).controller("phenomenaButtonController",["$scope","statusService",function(a,b){a.status=b.status,a.togglePhenomena=function(){b.status.showPhenomena=!b.status.showPhenomena}}]),angular.module("n52.core.provider",["n52.core.interface","n52.core.status"]).controller("ProviderButtonCtrl",["$scope","$modal",function(a,b){a.selectProvider=function(){b.open({animation:!0,templateUrl:"templates/map/provider-list-modal.html",controller:"ProviderListModalCtrl"})}}]).controller("ProviderLabelCtrl",["$scope","providerService",function(a,b){a.selectedProvider=b.selectedProvider}]).controller("ProviderDeselectProvider",["$scope","providerService",function(a,b){a.deselectAll=function(){b.selectProvider()}}]).controller("ProviderListModalCtrl",["$scope","$modalInstance","providerService",function(a,b,c){a.providerList=c.providerList,a.close=function(){b.close()},a.selectProvider=function(a){c.selectProvider(a),b.close()}}]).factory("providerService",["$rootScope","settingsService","interfaceService","statusService",function(a,b,c,d){var e=[],f={label:""};return getAllProviders=function(){angular.forEach(b.restApiUrls,function(a,g){c.getServices(g).then(function(a){angular.forEach(a,function(a){var c=!1;angular.forEach(b.providerBlackList,function(b){b.serviceID===a.id&&b.apiUrl===g&&(c=!0)}),c?console.info(g+"services/"+a.id+" is blacklisted!"):(g===d.status.apiProvider.url&&d.status.apiProvider.serviceID===a.id?(a.selected=!0,f.label=a.label):a.selected=!1,a.url=g,e.push(a))})})})},selectProvider=function(b){return angular.forEach(e,function(c){return b&&b.id===c.id&&b.url===c.url?(c.selected=!0,f.label=c.label,d.status.apiProvider={url:c.url,serviceID:c.id},void a.$emit("newProviderSelected")):void(c.selected=!1)}),b?void 0:(d.status.apiProvider={},void a.$emit("newProviderSelected"))},getAllProviders(),{providerList:e,selectedProvider:f,selectProvider:selectProvider}}]),angular.module("n52.core.map").controller("ClusterMarkerCtrl",["$scope","$rootScope","statusService",function(a,b,c){a.status=c.status,a.toggle=function(){c.status.clusterStations=!c.status.clusterStations,b.$emit("redrawStations")}}]).controller("ConcentrationMarkerCtrl",["$scope","$rootScope","statusService",function(a,b,c){a.status=c.status,a.toggle=function(){c.status.concentrationMarker=!c.status.concentrationMarker,b.$emit("redrawStations")}}]),angular.module("n52.core.station",["ui.bootstrap"]).controller("ModalStationCtrl",["$scope","$modalInstance","timeseriesService","$location","stationService","selection",function(a,b,c,d,e,f){e.determineTimeseries(f.stationId,f.url),a.isAllSelected=!0,a.station=e.station,a.phenomenonId=f.phenomenonId,a.toggleAll=function(){angular.forEach(a.station.entry.properties.timeseries,function(b){b.selected=a.isAllSelected})},a.close=function(){b.close()},a.toggled=function(){var b=!0;angular.forEach(a.station.entry.properties.timeseries,function(a){a.selected||(b=!1)}),a.isAllSelected=b},a.addTimeseriesSelection=function(){angular.forEach(a.station.entry.properties.timeseries,function(a){a.selected&&c.addTimeseriesById(a.id,f.url)}),d.url("/diagram"),b.close()}}]).controller("StationOpenerCtrl",["$modal","$rootScope","mapService",function(a,b,c){clickmarker=function(b,d){a.open({animation:!0,templateUrl:"templates/map/station.html",resolve:{selection:function(){var a,b;return d.model?(a=d.model.stationsId?d.model.stationsId:"",b=d.model.url?d.model.url:""):d.leafletObject&&d.leafletObject.options&&(a=d.leafletObject.options.stationsId?d.leafletObject.options.stationsId:"",b=d.leafletObject.options.url?d.leafletObject.options.url:""),{stationId:a,phenomenonId:c.map.selectedPhenomenonId,url:b}}},controller:"ModalStationCtrl"})},b.$on("leafletDirectivePath.click",clickmarker),b.$on("leafletDirectiveMarker.click",clickmarker)}]).service("stationService",["interfaceService",function(a){var b={entry:{}};return determineTimeseries=function(c,d){b.entry={},a.getStations(c,d).then(function(c){b.entry=c,angular.forEach(c.properties.timeseries,function(b,c){a.getTimeseries(c,d).then(function(a){angular.extend(b,a),b.selected=!0})})})},{determineTimeseries:determineTimeseries,station:b}}]);